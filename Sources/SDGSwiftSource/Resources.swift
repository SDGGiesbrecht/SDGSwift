/*
 Resources.swift

 This source file is part of the SDGSwift open source project.
 https://sdggiesbrecht.github.io/SDGSwift

 Copyright ©2018–2019 Jeremy David Giesbrecht and the SDGSwift project contributors.

 Soli Deo gloria.

 Licensed under the Apache Licence, Version 2.0.
 See http://www.apache.org/licenses/LICENSE-2.0 for licence information.
 */

import Foundation

internal enum Resources {}

extension Resources {
    static let dispatch = Data(base64Encoded: "cHVibGljIHByb3RvY29sIERpc3BhdGNoU291cmNlRmlsZVN5c3RlbU9iamVjdCB7CiNpZiAhb3MoTGludXgpICYmICFvcyhBbmRyb2lkKSAmJiAhb3MoV2luZG93cykKcHVibGljIHZhciBkYXRhOiBEaXNwYXRjaFNvdXJjZS5GaWxlU3lzdGVtRXZlbnQgeyBnZXQgfQojZW5kaWYKI2lmICFvcyhMaW51eCkgJiYgIW9zKEFuZHJvaWQpICYmICFvcyhXaW5kb3dzKQpwdWJsaWMgdmFyIGhhbmRsZTogSW50MzIgeyBnZXQgfQojZW5kaWYKI2lmICFvcyhMaW51eCkgJiYgIW9zKEFuZHJvaWQpICYmICFvcyhXaW5kb3dzKQpwdWJsaWMgdmFyIG1hc2s6IERpc3BhdGNoU291cmNlLkZpbGVTeXN0ZW1FdmVudCB7IGdldCB9CiNlbmRpZgp9CnB1YmxpYyBwcm90b2NvbCBEaXNwYXRjaFNvdXJjZU1hY2hSZWNlaXZlIHsKI2lmIEhBVkVfTUFDSApwdWJsaWMgdmFyIGhhbmRsZTogbWFjaF9wb3J0X3QgeyBnZXQgfQojZW5kaWYKfQpwdWJsaWMgcHJvdG9jb2wgRGlzcGF0Y2hTb3VyY2VNYWNoU2VuZCB7CiNpZiBIQVZFX01BQ0gKcHVibGljIHZhciBkYXRhOiBEaXNwYXRjaFNvdXJjZS5NYWNoU2VuZEV2ZW50IHsgZ2V0IH0KI2VuZGlmCiNpZiBIQVZFX01BQ0gKcHVibGljIHZhciBoYW5kbGU6IG1hY2hfcG9ydF90IHsgZ2V0IH0KI2VuZGlmCiNpZiBIQVZFX01BQ0gKcHVibGljIHZhciBtYXNrOiBEaXNwYXRjaFNvdXJjZS5NYWNoU2VuZEV2ZW50IHsgZ2V0IH0KI2VuZGlmCn0KcHVibGljIHByb3RvY29sIERpc3BhdGNoU291cmNlTWVtb3J5UHJlc3N1cmUgewojaWYgSEFWRV9NQUNICnB1YmxpYyB2YXIgZGF0YTogRGlzcGF0Y2hTb3VyY2UuTWVtb3J5UHJlc3N1cmVFdmVudCB7IGdldCB9CiNlbmRpZgojaWYgSEFWRV9NQUNICnB1YmxpYyB2YXIgbWFzazogRGlzcGF0Y2hTb3VyY2UuTWVtb3J5UHJlc3N1cmVFdmVudCB7IGdldCB9CiNlbmRpZgp9CnB1YmxpYyBwcm90b2NvbCBEaXNwYXRjaFNvdXJjZVByb2Nlc3MgewojaWYgIW9zKExpbnV4KSAmJiAhb3MoQW5kcm9pZCkgJiYgIW9zKFdpbmRvd3MpCnB1YmxpYyB2YXIgZGF0YTogRGlzcGF0Y2hTb3VyY2UuUHJvY2Vzc0V2ZW50IHsgZ2V0IH0KI2VuZGlmCiNpZiAhb3MoTGludXgpICYmICFvcyhBbmRyb2lkKSAmJiAhb3MoV2luZG93cykKcHVibGljIHZhciBoYW5kbGU6IHBpZF90IHsgZ2V0IH0KI2VuZGlmCiNpZiAhb3MoTGludXgpICYmICFvcyhBbmRyb2lkKSAmJiAhb3MoV2luZG93cykKcHVibGljIHZhciBtYXNrOiBEaXNwYXRjaFNvdXJjZS5Qcm9jZXNzRXZlbnQgeyBnZXQgfQojZW5kaWYKfQpwdWJsaWMgcHJvdG9jb2wgRGlzcGF0Y2hTb3VyY2VQcm90b2NvbCB7CnB1YmxpYyB2YXIgZGF0YTogVUludCB7IGdldCB9CnB1YmxpYyB2YXIgaGFuZGxlOiBVSW50IHsgZ2V0IH0KcHVibGljIHZhciBpc0NhbmNlbGxlZDogQm9vbCB7IGdldCB9CnB1YmxpYyB2YXIgbWFzazogVUludCB7IGdldCB9CkBhdmFpbGFibGUobWFjT1MxMC4xMiwgaU9TMTAuMCwgdHZPUzEwLjAsIHdhdGNoT1MzLjAsICopIHB1YmxpYyBmdW5jIGFjdGl2YXRlKCkge30KcHVibGljIGZ1bmMgY2FuY2VsKCkge30KcHVibGljIGZ1bmMgcmVzdW1lKCkge30KQGF2YWlsYWJsZShtYWNPUzEwLjEwLCBpT1M4LjAsICopIHB1YmxpYyBmdW5jIHNldENhbmNlbEhhbmRsZXIoaGFuZGxlcjogRGlzcGF0Y2hXb3JrSXRlbSkge30KcHVibGljIGZ1bmMgc2V0Q2FuY2VsSGFuZGxlcihxb3M6IERpc3BhdGNoUW9TID0geCwgZmxhZ3M6IERpc3BhdGNoV29ya0l0ZW1GbGFncyA9IHgsIGhhbmRsZXI6IERpc3BhdGNoU291cmNlSGFuZGxlcj8pIHt9CkBhdmFpbGFibGUobWFjT1MxMC4xMCwgaU9TOC4wLCAqKSBwdWJsaWMgZnVuYyBzZXRFdmVudEhhbmRsZXIoaGFuZGxlcjogRGlzcGF0Y2hXb3JrSXRlbSkge30KcHVibGljIGZ1bmMgc2V0RXZlbnRIYW5kbGVyKHFvczogRGlzcGF0Y2hRb1MgPSB4LCBmbGFnczogRGlzcGF0Y2hXb3JrSXRlbUZsYWdzID0geCwgaGFuZGxlcjogRGlzcGF0Y2hTb3VyY2VIYW5kbGVyPykge30KQGF2YWlsYWJsZShtYWNPUzEwLjEwLCBpT1M4LjAsICopIHB1YmxpYyBmdW5jIHNldFJlZ2lzdHJhdGlvbkhhbmRsZXIoaGFuZGxlcjogRGlzcGF0Y2hXb3JrSXRlbSkge30KcHVibGljIGZ1bmMgc2V0UmVnaXN0cmF0aW9uSGFuZGxlcihxb3M6IERpc3BhdGNoUW9TID0geCwgZmxhZ3M6IERpc3BhdGNoV29ya0l0ZW1GbGFncyA9IHgsIGhhbmRsZXI6IERpc3BhdGNoU291cmNlSGFuZGxlcj8pIHt9CnB1YmxpYyBmdW5jIHN1c3BlbmQoKSB7fQp9CnB1YmxpYyBwcm90b2NvbCBEaXNwYXRjaFNvdXJjZVJlYWQgewp9CnB1YmxpYyBwcm90b2NvbCBEaXNwYXRjaFNvdXJjZVNpZ25hbCB7Cn0KcHVibGljIHByb3RvY29sIERpc3BhdGNoU291cmNlVGltZXIgewpAYXZhaWxhYmxlKHN3aWZ0LCBpbnRyb2R1Y2VkOiA0KSBwdWJsaWMgZnVuYyBzY2hlZHVsZShkZWFkbGluZTogRGlzcGF0Y2hUaW1lLCByZXBlYXRpbmcgaW50ZXJ2YWw6IERpc3BhdGNoVGltZUludGVydmFsID0geCwgbGVld2F5OiBEaXNwYXRjaFRpbWVJbnRlcnZhbCA9IHgpIHt9CkBhdmFpbGFibGUoc3dpZnQsIGludHJvZHVjZWQ6IDQpIHB1YmxpYyBmdW5jIHNjaGVkdWxlKGRlYWRsaW5lOiBEaXNwYXRjaFRpbWUsIHJlcGVhdGluZyBpbnRlcnZhbDogRG91YmxlLCBsZWV3YXk6IERpc3BhdGNoVGltZUludGVydmFsID0geCkge30KQGF2YWlsYWJsZShzd2lmdCwgaW50cm9kdWNlZDogNCkgcHVibGljIGZ1bmMgc2NoZWR1bGUod2FsbERlYWRsaW5lOiBEaXNwYXRjaFdhbGxUaW1lLCByZXBlYXRpbmcgaW50ZXJ2YWw6IERpc3BhdGNoVGltZUludGVydmFsID0geCwgbGVld2F5OiBEaXNwYXRjaFRpbWVJbnRlcnZhbCA9IHgpIHt9CkBhdmFpbGFibGUoc3dpZnQsIGludHJvZHVjZWQ6IDQpIHB1YmxpYyBmdW5jIHNjaGVkdWxlKHdhbGxEZWFkbGluZTogRGlzcGF0Y2hXYWxsVGltZSwgcmVwZWF0aW5nIGludGVydmFsOiBEb3VibGUsIGxlZXdheTogRGlzcGF0Y2hUaW1lSW50ZXJ2YWwgPSB4KSB7fQpwdWJsaWMgZnVuYyBzY2hlZHVsZU9uZXNob3QoZGVhZGxpbmU6IERpc3BhdGNoVGltZSwgbGVld2F5OiBEaXNwYXRjaFRpbWVJbnRlcnZhbCkge30KcHVibGljIGZ1bmMgc2NoZWR1bGVPbmVzaG90KHdhbGxEZWFkbGluZTogRGlzcGF0Y2hXYWxsVGltZSwgbGVld2F5OiBEaXNwYXRjaFRpbWVJbnRlcnZhbCkge30KcHVibGljIGZ1bmMgc2NoZWR1bGVSZXBlYXRpbmcoZGVhZGxpbmU6IERpc3BhdGNoVGltZSwgaW50ZXJ2YWw6IERpc3BhdGNoVGltZUludGVydmFsLCBsZWV3YXk6IERpc3BhdGNoVGltZUludGVydmFsKSB7fQpwdWJsaWMgZnVuYyBzY2hlZHVsZVJlcGVhdGluZyh3YWxsRGVhZGxpbmU6IERpc3BhdGNoV2FsbFRpbWUsIGludGVydmFsOiBEaXNwYXRjaFRpbWVJbnRlcnZhbCwgbGVld2F5OiBEaXNwYXRjaFRpbWVJbnRlcnZhbCkge30KfQpwdWJsaWMgcHJvdG9jb2wgRGlzcGF0Y2hTb3VyY2VVc2VyRGF0YUFkZCB7CnB1YmxpYyBmdW5jIGFkZChkYXRhOiBVSW50KSB7fQp9CnB1YmxpYyBwcm90b2NvbCBEaXNwYXRjaFNvdXJjZVVzZXJEYXRhT3IgewpwdWJsaWMgZnVuYyBvcihkYXRhOiBVSW50KSB7fQp9CnB1YmxpYyBwcm90b2NvbCBEaXNwYXRjaFNvdXJjZVVzZXJEYXRhUmVwbGFjZSB7CnB1YmxpYyBmdW5jIHJlcGxhY2UoZGF0YTogVUludCkge30KfQpwdWJsaWMgcHJvdG9jb2wgRGlzcGF0Y2hTb3VyY2VXcml0ZSB7Cn0=")!
    static let swift = Data(base64Encoded: "")!
    static let syntaxHighlighting = String(data: Data(base64Encoded: "LyoKIFN5bnRheCBIaWdobGlnaHRpbmcuY3NzCgogVGhpcyBzb3VyY2UgZmlsZSBpcyBwYXJ0IG9mIHRoZSBTREdTd2lmdCBvcGVuIHNvdXJjZSBwcm9qZWN0LgogaHR0cHM6Ly9zZGdnaWVzYnJlY2h0LmdpdGh1Yi5pby9TREdTd2lmdAoKIENvcHlyaWdodCDCqTIwMTjigJMyMDE5IEplcmVteSBEYXZpZCBHaWVzYnJlY2h0IGFuZCB0aGUgU0RHU3dpZnQgcHJvamVjdCBjb250cmlidXRvcnMuCgogU29saSBEZW8gZ2xvcmlhLgoKIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5jZSwgVmVyc2lvbiAyLjAuCiBTZWUgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wIGZvciBsaWNlbmNlIGluZm9ybWF0aW9uLgogKi8KCi8qIExheW91dCAqLwoKLnN3aWZ0IHsKICAgIGRpc3BsYXk6IGlubGluZTsKICAgIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDsKfQouc3dpZnQuYmxvY2txdW90ZSB7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIG1hcmdpbjogMS40ZW0gMDsKICAgIGJvcmRlcjogMXB4IHNvbGlkOwogICAgIGJvcmRlci1yYWRpdXM6IDAuMzUyOTRlbTsKICAgIHBhZGRpbmc6IDAuMzUyOTRlbSAwLjk0MTE4ZW07Cn0KCi8qIENvbG91ciAqLwoKLnN3aWZ0LmJsb2NrcXVvdGUgewogICAgYmFja2dyb3VuZC1jb2xvcjogI0Y5RkFGQTsKICAgIGJvcmRlci1jb2xvcjogICNFNkU2RTY7Cn0KLnN3aWZ0IHsKICAgIGNvbG9yOiAjMDAwMDAwOwp9Cgouc3dpZnQgLmtleXdvcmQgewogICAgY29sb3I6ICNBQTBEOTE7Cn0KCi5zd2lmdCAucHVuY3R1YXRpb24gewogICAgY29sb3I6ICMwMDAwMDA7Cn0KCi5zd2lmdCAuZXh0ZXJuYWwuaWRlbnRpZmllciB7CiAgICBjb2xvcjogIzVDMjY5OTsKfQouc3dpZnQgLmludGVybmFsLmlkZW50aWZpZXIgewogICAgY29sb3I6ICMzRjZFNzQ7Cn0KCi5zd2lmdCAubnVtYmVyIHsKICAgIGNvbG9yOiAjMEUwRUZGOwp9Cgouc3dpZnQgLnN0cmluZyB7CiAgICBjb2xvcjogI0M0MUExNjsKfQouc3dpZnQgLnN0cmluZ+KAkHB1bmN0dWF0aW9uIHsKICAgIGNvbG9yOiAjNjIyNzBCOwp9Cgouc3dpZnQgLmNvbXBpbGF0aW9u4oCQY29uZGl0aW9uIHsKICAgIGNvbG9yOiAjNjQzODIwOwp9Cgouc3dpZnQgLmNvbW1lbnQgewogICAgY29sb3I6ICMwMDc0MDA7Cn0KLnN3aWZ0IC5jb21tZW504oCQcHVuY3R1YXRpb24gewogICAgY29sb3I6ICMwMDNBMDA7Cn0KLnN3aWZ0IC51cmwgewogICAgY29sb3I6ICMwRTBFRkY7Cn0KCi5zd2lmdCAuY29kZSB7CiAgICBjb2xvcjogIzAwMDAwMDsKfQoKLyogRm9udCAqLwoKLnN3aWZ0IHsKICAgIGZvbnQtZmFtaWx5OiAiU0YgTW9ubyIsIE1lbmxvLCBtb25vc3BhY2UsICJTRiBQcm8gSWNvbnMiOwogICAgbGV0dGVyLXNwYWNpbmc6IC0wLjAyN2VtOwogICAgbGluZS1oZWlnaHQ6IDEuMjY2Njc7Cn0KCi5zd2lmdCAudGV4dCB7CiAgICBmb250LWZhbWlseTogIlNGIFBybyBUZXh0IiwgIlNGIFBybyBJY29ucyIsICItYXBwbGUtc3lzdGVtIiwgIkJsaW5rTWFjU3lzdGVtRm9udCIsICJIZWx2ZXRpY2EgTmV1ZSIsICJIZWx2ZXRpY2EiLCAiQXJpYWwiLCBzYW5zLXNlcmlmOwogICAgbGV0dGVyLXNwYWNpbmc6IDA7Cn0KCi5zd2lmdCAuY29tbWVudOKAkGtleXdvcmQgewogICAgZm9udC13ZWlnaHQ6IGJvbGQ7Cn0KCi5zd2lmdCAudXJsOmxpbmssIC5zd2lmdCAudXJsOnZpc2l0ZWQgewogICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwp9Ci5zd2lmdCAudXJsOmhvdmVyIHsKICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOwp9Cg==")!, encoding: String.Encoding.utf8)!
    static let xctest = Data(base64Encoded: "b3BlbiBjbGFzcyBYQ1ROU05vdGlmaWNhdGlvbkV4cGVjdGF0aW9uIHsKcHVibGljIGluaXQobmFtZSBub3RpZmljYXRpb25OYW1lOiBOb3RpZmljYXRpb24uTmFtZSwgb2JqZWN0OiBBbnk/ID0geCwgbm90aWZpY2F0aW9uQ2VudGVyOiBOb3RpZmljYXRpb25DZW50ZXIgPSB4LCBmaWxlOiBTdGF0aWNTdHJpbmcgPSB4LCBsaW5lOiBJbnQgPSB4KSB7fQpvcGVuIHZhciBoYW5kbGVyOiBIYW5kbGVyPyB7IGdldCBzZXQgfQpvcGVuIHZhciBub3RpZmljYXRpb25DZW50ZXI6IE5vdGlmaWNhdGlvbkNlbnRlciB7IGdldCB9Cm9wZW4gdmFyIG5vdGlmaWNhdGlvbk5hbWU6IE5vdGlmaWNhdGlvbi5OYW1lIHsgZ2V0IH0Kb3BlbiB2YXIgb2JzZXJ2ZWRPYmplY3Q6IEFueT8geyBnZXQgfQp9Cm9wZW4gY2xhc3MgWENUTlNQcmVkaWNhdGVFeHBlY3RhdGlvbiB7CnB1YmxpYyBpbml0KHByZWRpY2F0ZTogTlNQcmVkaWNhdGUsIG9iamVjdDogQW55PyA9IHgsIGZpbGU6IFN0YXRpY1N0cmluZyA9IHgsIGxpbmU6IEludCA9IHgpIHt9Cm9wZW4gdmFyIGhhbmRsZXI6IEhhbmRsZXI/IHsgZ2V0IHNldCB9Cm9wZW4gdmFyIG9iamVjdDogQW55PyB7IGdldCB9Cm9wZW4gdmFyIHByZWRpY2F0ZTogTlNQcmVkaWNhdGUgeyBnZXQgfQp9Cm9wZW4gY2xhc3MgWENUV2FpdGVyIHsKb3BlbiBjbGFzcyBmdW5jIHdhaXQoZm9yIGV4cGVjdGF0aW9uczogW1hDVGVzdEV4cGVjdGF0aW9uXSwgdGltZW91dDogVGltZUludGVydmFsLCBlbmZvcmNlT3JkZXI6IEJvb2wgPSB4LCBmaWxlOiBTdGF0aWNTdHJpbmcgPSB4LCBsaW5lOiBJbnQgPSB4KSAtPiBSZXN1bHQge30KcHVibGljIGluaXQoZGVsZWdhdGU6IFhDVFdhaXRlckRlbGVnYXRlPyA9IHgpIHt9Cm9wZW4gdmFyIGRlbGVnYXRlOiBYQ1RXYWl0ZXJEZWxlZ2F0ZT8geyBnZXQgc2V0IH0KcHVibGljIHZhciBkZXNjcmlwdGlvbjogU3RyaW5nIHsgZ2V0IH0Kb3BlbiB2YXIgZnVsZmlsbGVkRXhwZWN0YXRpb25zOiBbWENUZXN0RXhwZWN0YXRpb25dIHsgZ2V0IH0KcHVibGljIGZ1bmMgPT0obGhzOiBYQ1RXYWl0ZXIsIHJoczogWENUV2FpdGVyKSAtPiBCb29sIHt9CkBkaXNjYXJkYWJsZVJlc3VsdCBvcGVuIGZ1bmMgd2FpdChmb3IgZXhwZWN0YXRpb25zOiBbWENUZXN0RXhwZWN0YXRpb25dLCB0aW1lb3V0OiBUaW1lSW50ZXJ2YWwsIGVuZm9yY2VPcmRlcjogQm9vbCA9IHgsIGZpbGU6IFN0YXRpY1N0cmluZyA9IHgsIGxpbmU6IEludCA9IHgpIC0+IFJlc3VsdCB7fQp9Cm9wZW4gY2xhc3MgWENUZXN0IHsKcHVibGljIGluaXQoKSB7fQpvcGVuIHZhciBuYW1lOiBTdHJpbmcgeyBnZXQgfQpvcGVuIHZhciB0ZXN0Q2FzZUNvdW50OiBJbnQgeyBnZXQgfQpvcGVuIHZhciB0ZXN0UnVuOiBYQ1Rlc3RSdW4/IHsgZ2V0IH0Kb3BlbiB2YXIgdGVzdFJ1bkNsYXNzOiBBbnlDbGFzcz8geyBnZXQgfQpvcGVuIGZ1bmMgcGVyZm9ybShfIHJ1bjogWENUZXN0UnVuKSB7fQpvcGVuIGZ1bmMgcnVuKCkge30Kb3BlbiBmdW5jIHNldFVwKCkge30Kb3BlbiBmdW5jIHRlYXJEb3duKCkge30KfQpvcGVuIGNsYXNzIFhDVGVzdENhc2UgewpvcGVuIGNsYXNzIGZ1bmMgc2V0VXAoKSB7fQpvcGVuIGNsYXNzIGZ1bmMgdGVhckRvd24oKSB7fQpwdWJsaWMgcmVxdWlyZWQgaW5pdChuYW1lOiBTdHJpbmcsIHRlc3RDbG9zdXJlOiBAZXNjYXBpbmcgWENUZXN0Q2FzZUNsb3N1cmUpIHt9Cm9wZW4gdmFyIGNvbnRpbnVlQWZ0ZXJGYWlsdXJlOiBCb29sIHsgZ2V0IHNldCB9Cm9wZW4gZnVuYyBpbnZva2VUZXN0KCkge30Kb3BlbiBmdW5jIHJlY29yZEZhaWx1cmUod2l0aERlc2NyaXB0aW9uIGRlc2NyaXB0aW9uOiBTdHJpbmcsIGluRmlsZSBmaWxlUGF0aDogU3RyaW5nLCBhdExpbmUgbGluZU51bWJlcjogSW50LCBleHBlY3RlZDogQm9vbCkge30KfQpvcGVuIGNsYXNzIFhDVGVzdENhc2VSdW4gewpvcGVuIGZ1bmMgcmVjb3JkRmFpbHVyZSh3aXRoRGVzY3JpcHRpb24gZGVzY3JpcHRpb246IFN0cmluZywgaW5GaWxlIGZpbGVQYXRoOiBTdHJpbmc/LCBhdExpbmUgbGluZU51bWJlcjogSW50LCBleHBlY3RlZDogQm9vbCkge30KfQpvcGVuIGNsYXNzIFhDVGVzdEV4cGVjdGF0aW9uIHsKcHVibGljIGluaXQoZGVzY3JpcHRpb246IFN0cmluZyA9IHgsIGZpbGU6IFN0YXRpY1N0cmluZyA9IHgsIGxpbmU6IEludCA9IHgpIHt9Cm9wZW4gdmFyIGFzc2VydEZvck92ZXJGdWxmaWxsOiBCb29sIHsgZ2V0IHNldCB9CnB1YmxpYyB2YXIgZGVzY3JpcHRpb246IFN0cmluZyB7IGdldCB9Cm9wZW4gdmFyIGV4cGVjdGF0aW9uRGVzY3JpcHRpb246IFN0cmluZyB7IGdldCBzZXQgfQpvcGVuIHZhciBleHBlY3RlZEZ1bGZpbGxtZW50Q291bnQ6IEludCB7IGdldCBzZXQgfQpvcGVuIHZhciBpc0ludmVydGVkOiBCb29sIHsgZ2V0IHNldCB9CnB1YmxpYyBmdW5jID09KGxoczogWENUZXN0RXhwZWN0YXRpb24sIHJoczogWENUZXN0RXhwZWN0YXRpb24pIC0+IEJvb2wge30Kb3BlbiBmdW5jIGZ1bGZpbGwoXyBmaWxlOiBTdGF0aWNTdHJpbmcgPSB4LCBsaW5lOiBJbnQgPSB4KSB7fQpwdWJsaWMgZnVuYyBoYXNoKGludG8gaGFzaGVyOiBpbm91dCBIYXNoZXIpIHt9Cn0Kb3BlbiBjbGFzcyBYQ1Rlc3RSdW4gewpwdWJsaWMgcmVxdWlyZWQgaW5pdCh0ZXN0OiBYQ1Rlc3QpIHt9Cm9wZW4gdmFyIGV4ZWN1dGlvbkNvdW50OiBJbnQgeyBnZXQgfQpvcGVuIHZhciBmYWlsdXJlQ291bnQ6IEludCB7IGdldCB9Cm9wZW4gdmFyIGhhc1N1Y2NlZWRlZDogQm9vbCB7IGdldCB9Cm9wZW4gdmFyIHN0YXJ0RGF0ZTogRGF0ZT8geyBnZXQgfQpvcGVuIHZhciBzdG9wRGF0ZTogRGF0ZT8geyBnZXQgfQpwdWJsaWMgdmFyIHRlc3Q6IFhDVGVzdCB7IGdldCB9Cm9wZW4gdmFyIHRlc3RDYXNlQ291bnQ6IEludCB7IGdldCB9Cm9wZW4gdmFyIHRlc3REdXJhdGlvbjogVGltZUludGVydmFsIHsgZ2V0IH0Kb3BlbiB2YXIgdG90YWxEdXJhdGlvbjogVGltZUludGVydmFsIHsgZ2V0IH0Kb3BlbiB2YXIgdG90YWxGYWlsdXJlQ291bnQ6IEludCB7IGdldCB9Cm9wZW4gdmFyIHVuZXhwZWN0ZWRFeGNlcHRpb25Db3VudDogSW50IHsgZ2V0IH0Kb3BlbiBmdW5jIHN0YXJ0KCkge30Kb3BlbiBmdW5jIHN0b3AoKSB7fQp9Cm9wZW4gY2xhc3MgWENUZXN0U3VpdGUgewpwdWJsaWMgaW5pdChuYW1lOiBTdHJpbmcpIHt9Cm9wZW4gdmFyIHRlc3RzIHsgZ2V0IH0Kb3BlbiBmdW5jIGFkZFRlc3QoXyB0ZXN0OiBYQ1Rlc3QpIHt9Cn0Kb3BlbiBjbGFzcyBYQ1Rlc3RTdWl0ZVJ1biB7Cm9wZW4gdmFyIHRlc3RSdW5zIHsgZ2V0IH0Kb3BlbiBmdW5jIGFkZFRlc3RSdW4oXyB0ZXN0UnVuOiBYQ1Rlc3RSdW4pIHt9Cn0KcHVibGljIHByb3RvY29sIFhDVFdhaXRlckRlbGVnYXRlIHsKcHVibGljIGZ1bmMgbmVzdGVkV2FpdGVyKF8gd2FpdGVyOiBYQ1RXYWl0ZXIsIHdhc0ludGVycnVwdGVkQnlUaW1lZE91dFdhaXRlciBvdXRlcldhaXRlcjogWENUV2FpdGVyKSB7fQpwdWJsaWMgZnVuYyB3YWl0ZXIoXyB3YWl0ZXI6IFhDVFdhaXRlciwgZGlkRnVsZmlsbEludmVydGVkRXhwZWN0YXRpb24gZXhwZWN0YXRpb246IFhDVGVzdEV4cGVjdGF0aW9uKSB7fQpwdWJsaWMgZnVuYyB3YWl0ZXIoXyB3YWl0ZXI6IFhDVFdhaXRlciwgZGlkVGltZW91dFdpdGhVbmZ1bGZpbGxlZEV4cGVjdGF0aW9ucyB1bmZ1bGZpbGxlZEV4cGVjdGF0aW9uczogW1hDVGVzdEV4cGVjdGF0aW9uXSkge30KcHVibGljIGZ1bmMgd2FpdGVyKF8gd2FpdGVyOiBYQ1RXYWl0ZXIsIGZ1bGZpbGxtZW50RGlkVmlvbGF0ZU9yZGVyaW5nQ29uc3RyYWludHNGb3IgZXhwZWN0YXRpb246IFhDVGVzdEV4cGVjdGF0aW9uLCByZXF1aXJlZEV4cGVjdGF0aW9uOiBYQ1Rlc3RFeHBlY3RhdGlvbikge30KfQpwdWJsaWMgcHJvdG9jb2wgWENUZXN0T2JzZXJ2YXRpb24gewpwdWJsaWMgZnVuYyB0ZXN0QnVuZGxlRGlkRmluaXNoKF8gdGVzdEJ1bmRsZTogQnVuZGxlKSB7fQpwdWJsaWMgZnVuYyB0ZXN0QnVuZGxlV2lsbFN0YXJ0KF8gdGVzdEJ1bmRsZTogQnVuZGxlKSB7fQpwdWJsaWMgZnVuYyB0ZXN0Q2FzZShfIHRlc3RDYXNlOiBYQ1Rlc3RDYXNlLCBkaWRGYWlsV2l0aERlc2NyaXB0aW9uIGRlc2NyaXB0aW9uOiBTdHJpbmcsIGluRmlsZSBmaWxlUGF0aDogU3RyaW5nPywgYXRMaW5lIGxpbmVOdW1iZXI6IEludCkge30KcHVibGljIGZ1bmMgdGVzdENhc2VEaWRGaW5pc2goXyB0ZXN0Q2FzZTogWENUZXN0Q2FzZSkge30KcHVibGljIGZ1bmMgdGVzdENhc2VXaWxsU3RhcnQoXyB0ZXN0Q2FzZTogWENUZXN0Q2FzZSkge30KcHVibGljIGZ1bmMgdGVzdFN1aXRlRGlkRmluaXNoKF8gdGVzdFN1aXRlOiBYQ1Rlc3RTdWl0ZSkge30KcHVibGljIGZ1bmMgdGVzdFN1aXRlV2lsbFN0YXJ0KF8gdGVzdFN1aXRlOiBYQ1Rlc3RTdWl0ZSkge30KfQ==")!

}
