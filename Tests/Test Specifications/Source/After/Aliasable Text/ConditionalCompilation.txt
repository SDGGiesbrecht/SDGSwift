/*
 ConditionalCompilation.swift

 This source file is part of the SDGSwift open source project.
 https://sdggiesbrecht.github.io/SDGSwift/SDGSwift

 Copyright ©2018 Jeremy David Giesbrecht and the SDGSwift project contributors.

 Soli Deo gloria.

 Licensed under the Apache Licence, Version 2.0.
 See http://www.apache.org/licenses/LICENSE-2.0 for licence information.
 */

#if os(macOS)
/// Falls on Newton.
func fallOnNewton() {}
#elseif os(Linux)
/// Waddles.
func waddle() {}
#endif

#if canImport(AppKit)
public typealias WithAppKit = B̲o̲o̲l̲
public typealias Universal = B̲o̲o̲l̲
#elseif canImport(UIKit)
public typealias WithUIKit = B̲o̲o̲l̲
public typealias Universal = B̲o̲o̲l̲
#else
public typealias Fallback = B̲o̲o̲l̲
public typealias Universal = B̲o̲o̲l̲
#endif

public struct NestingStructure {

    #if canImport(AppKit)
    public typealias WithAppKit = B̲o̲o̲l̲
    public typealias Universal = B̲o̲o̲l̲
    #elseif canImport(UIKit)
    public typealias WithUIKit = B̲o̲o̲l̲
    public typealias Universal = B̲o̲o̲l̲
    #else
    public typealias Fallback = B̲o̲o̲l̲
    public typealias Universal = B̲o̲o̲l̲
    #endif
}

public struct PossiblyConforming {}
#if os(macOS)
extension P̲o̲s̲s̲i̲b̲l̲y̲C̲o̲n̲f̲o̲r̲m̲i̲n̲g̲ : C̲o̲n̲d̲i̲t̲i̲o̲n̲a̲l̲l̲y̲A̲v̲a̲i̲l̲a̲b̲l̲e̲P̲r̲o̲t̲o̲c̲o̲l̲ {
    public struct ConditionalSubType {}
    public static var conditionalStaticProperty: B̲o̲o̲l̲ {
        return true
    }
    public init(conditionalInitializer: B̲o̲o̲l̲) {
        self.init()
    }
    public var conditionalProperty: B̲o̲o̲l̲ {
        return true
    }
    public subscript(conditionalSubscript: B̲o̲o̲l̲) -> B̲o̲o̲l̲ {
        return c̲o̲n̲d̲i̲t̲i̲o̲n̲a̲l̲S̲u̲b̲s̲c̲r̲i̲p̲t̲
    }
    #if ADDITIONAL_CONDITION
    public func conditionalMethod() {}
    #endif
}

#if CUSTOM
extension P̲o̲s̲s̲i̲b̲l̲y̲C̲o̲n̲f̲o̲r̲m̲i̲n̲g̲ : A̲n̲o̲t̲h̲e̲r̲C̲o̲n̲d̲i̲t̲i̲o̲n̲a̲l̲l̲y̲A̲v̲a̲i̲l̲a̲b̲l̲e̲P̲r̲o̲t̲o̲c̲o̲l̲ {}
#endif

#endif

#if    /* This condition needs clean‐up.*/      NEEDING_CLEANUP // ...
public struct CleanedUpCompilationCondition {}
#endif

#if LEVEL_ONE
#if LEVEL_TWO
public struct DoublyNested {}
#endif
#endif
