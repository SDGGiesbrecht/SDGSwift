/*
 Protocol.swift

 This source file is part of the SDGSwift open source project.
 https://sdggiesbrecht.github.io/SDGSwift/SDGSwift

 Copyright ©2018 Jeremy David Giesbrecht and the SDGSwift project contributors.

 Soli Deo gloria.

 Licensed under the Apache Licence, Version 2.0.
 See http://www.apache.org/licenses/LICENSE-2.0 for licence information.
 */

public protocol Protocol {
    associatedtype AssociatedType
    associatedtype OverridableAssociatedType
    init(overridableInitializer: B̲o̲o̲l̲)
    func requiredFunction()
    func possiblyRequiredFunction()
    func overrideableFunction()
    func _hiddenFunction()
    var getOnlyProperty: B̲o̲o̲l̲ { get }
    var getSetProperty: B̲o̲o̲l̲ { get set }
    var overridableProperty: B̲o̲o̲l̲ { get }
    subscript(overridableSubscript: B̲o̲o̲l̲) -> B̲o̲o̲l̲ { get }
}

extension P̲r̲o̲t̲o̲c̲o̲l̲ {
    public typealias OverridableAssociatedType = B̲o̲o̲l̲
    public init(overridableInitializer: B̲o̲o̲l̲) {}
    public func overrideableFunction() {}
    public func providedFunction() {}
    public var overridableProperty: B̲o̲o̲l̲ { return true }
    public subscript(overridableSubscript: B̲o̲o̲l̲) -> B̲o̲o̲l̲ { return true }
}

extension P̲r̲o̲t̲o̲c̲o̲l̲ where Self : O̲t̲h̲e̲r̲P̲r̲o̲t̲o̲c̲o̲l̲ {
    public func possiblyRequiredFunction()
    public func functionWithNestedGenerics<T>(_ parameter: T̲) where T̲ : E̲q̲u̲a̲t̲a̲b̲l̲e̲
}

protocol InternalProtocol {}

extension P̲r̲o̲t̲o̲c̲o̲l̲ where Self.A̲s̲s̲o̲c̲i̲a̲t̲e̲d̲T̲y̲p̲e̲ =̲=̲ I̲n̲t̲ {
    public func conditionallyProvidedFunction() {}
}

public protocol ProtocolWithInheritanceAndConstraints : I̲n̲h̲e̲r̲i̲t̲e̲d̲O̲n̲e̲, I̲n̲h̲e̲r̲i̲t̲e̲d̲T̲w̲o̲
where A̲s̲s̲o̲c̲i̲a̲t̲e̲d̲T̲y̲p̲e̲ : O̲t̲h̲e̲r̲P̲r̲o̲t̲o̲c̲o̲l̲ {

}
