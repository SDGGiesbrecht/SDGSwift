.library(name: "PrimaryProduct")
.target(name: "PrimaryModule")
Package(name: "PackageToDocument")
case visible
class AnotherSublass
class Subclass
class Superclass
enum Enumeration
func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool
func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]
func contains(Self.Element) -> Bool
func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool
func distance(from: Self.Index, to: Self.Index) -> Int
func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence
func dropFirst(Int) -> Self.SubSequence
func dropLast(Int) -> Self.SubSequence
func elementsEqual<OtherSequence>(OtherSequence) -> Bool
func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool
func encode(to: Encoder) throws
func encode(to: Encoder) throws
func enumerated() -> EnumeratedSequence<Self>
func executeFunction()
func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]
func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?
func firstIndex(of: Self.Element) -> Self.Index?
func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?
func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]
func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]
func forEach((Self.Element) throws -> Void) rethrows
func formIndex(after: inout Self.Index)
func formIndex(inout Self.Index, offsetBy: Int)
func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool
func index(Self.Index, offsetBy: Int) -> Self.Index
func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?
func index(after: Int) -> Int
func index(of: Self.Element) -> Self.Index?
func inherited()
func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool
func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool
func makeIterator() -> IndexingIterator<Self>
func map<T>((Self.Element) throws -> T) rethrows -> [T]
func map<T>((Self.Element) throws -> T) rethrows -> [T]
func max() -> Self.Element?
func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?
func method()
func methodOverride()
func min() -> Self.Element?
func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?
func prefix(Int) -> Self.SubSequence
func prefix(through: Self.Index) -> Self.SubSequence
func prefix(upTo: Self.Index) -> Self.SubSequence
func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence
func provision()
func randomElement() -> Self.Element?
func randomElement<T>(using: inout T) -> Self.Element?
func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result
func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result
func required()
func requirement()
func reversed() -> [Self.Element]
func shuffled() -> [Self.Element]
func shuffled<T>(using: inout T) -> [Self.Element]
func sorted() -> [Self.Element]
func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]
func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]
func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]
func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool
func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool
func suffix(Int) -> Self.SubSequence
func suffix(from: Self.Index) -> Self.SubSequence
func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?
infix operator ≠
infix operator ≤
infix operator ≥
init()
init(extendedGraphemeClusterLiteral: Self.StringLiteralType)
init(from: Decoder) throws
init(from: Decoder) throws
init(stringInterpolation: DefaultStringInterpolation)
init(stringInterpolation: DefaultStringInterpolation)
init(stringLiteral: String)
init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)
init?(rawValue: Int)
let property: Bool
precedencegroup Precedence
protocol Protocol
static func != (Self, Self) -> Bool
static func != (Self, Self) -> Bool
static func ... (Self) -> PartialRangeFrom<Self>
static func ... (Self) -> PartialRangeThrough<Self>
static func ... (Self, Self) -> ClosedRange<Self>
static func ..< (Self) -> PartialRangeUpTo<Self>
static func ..< (Self, Self) -> Range<Self>
static func < (Inherited, Inherited) -> Bool
static func <= (Self, Self) -> Bool
static func == (Inherited, Inherited) -> Bool
static func > (Self, Self) -> Bool
static func >= (Self, Self) -> Bool
static func staticMethod()
static let staticProperty: Bool
struct CollectionType
struct Inherited
struct InheritingAssociatedType
struct Structure
struct TypeExpressibleByStringInterpolation
subscript((UnboundedRange_) -> ()) -> Self.SubSequence
subscript(Int) -> Bool
subscript(Int) -> Int
subscript(Range<Self.Index>) -> Slice<Self>
subscript<R>(R) -> Self.SubSequence
typealias Index
typealias Indices
typealias RawValue
var count: Int
var endIndex: Int
var extensionProperty: Bool
var first: Self.Element?
var globalVariable: Bool
var indices: DefaultIndices<Self>
var isEmpty: Bool
var lazy: LazySequence<Self>
var propertyInASeparateExtension: Bool
var rawValue: Int
var startIndex: Int
var underestimatedCount: Int
var underestimatedCount: Int