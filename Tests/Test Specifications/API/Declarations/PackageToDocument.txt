.library(name: "PrimaryProduct")
.target(name: "PrimaryModule")
@warn_unqualified_access func max() -> Self.Element?
@warn_unqualified_access func max(by areInIncreasingOrder: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?
@warn_unqualified_access func min() -> Self.Element?
@warn_unqualified_access func min(by areInIncreasingOrder: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?
Package(name: "PackageToDocument")
associatedtype VisibleAssociatedType
case visible
class AnotherSublass
class Class
class Subclass
class Superclass
enum Enumeration
func allSatisfy(_ predicate: (Self.Element) throws -> Bool) rethrows -> Bool
func compactMap<ElementOfResult>(_ transform: (Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]
func contains(_ element: Self.Element) -> Bool
func contains(where predicate: (Self.Element) throws -> Bool) rethrows -> Bool
func distance(from start: Self.Index, to end: Self.Index) -> Int
func drop(while predicate: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence
func dropFirst(_ k: Int = 1) -> Self.SubSequence
func dropLast(_ k: Int = 1) -> Self.SubSequence
func elementsEqual<OtherSequence>(_ other: OtherSequence) -> Bool where OtherSequence : Sequence, Self.Element == OtherSequence.Element
func elementsEqual<OtherSequence>(_ other: OtherSequence, by areEquivalent: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool where OtherSequence : Sequence
func encode(to encoder: Encoder) throws
func enumerated() -> EnumeratedSequence<Self>
func executeFunction()
func filter(_ isIncluded: (Self.Element) throws -> Bool) rethrows -> [Self.Element]
func first(where predicate: (Self.Element) throws -> Bool) rethrows -> Self.Element?
func firstIndex(of element: Self.Element) -> Self.Index?
func firstIndex(where predicate: (Self.Element) throws -> Bool) rethrows -> Self.Index?
func flatMap<ElementOfResult>(_ transform: (Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]
func flatMap<SegmentOfResult>(_ transform: (Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element] where SegmentOfResult : Sequence
func forEach(_ body: (Self.Element) throws -> Void) rethrows
func formIndex(_ i: inout Self.Index, offsetBy distance: Int)
func formIndex(_ i: inout Self.Index, offsetBy distance: Int, limitedBy limit: Self.Index) -> Bool
func formIndex(after i: inout Self.Index)
func index(_ i: Self.Index, offsetBy distance: Int) -> Self.Index
func index(_ i: Self.Index, offsetBy distance: Int, limitedBy limit: Self.Index) -> Self.Index?
func index(after i: Int) -> Int
func index(of element: Self.Element) -> Self.Index?
func inherited()
func lexicographicallyPrecedes<OtherSequence>(_ other: OtherSequence) -> Bool where OtherSequence : Sequence, Self.Element == OtherSequence.Element
func lexicographicallyPrecedes<OtherSequence>(_ other: OtherSequence, by areInIncreasingOrder: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool where OtherSequence : Sequence, Self.Element == OtherSequence.Element
func makeIterator() -> IndexingIterator<Self>
func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]
func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]
func method()
func prefix(_ maxLength: Int) -> Self.SubSequence
func prefix(through position: Self.Index) -> Self.SubSequence
func prefix(upTo end: Self.Index) -> Self.SubSequence
func prefix(while predicate: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence
func provision()
func randomElement() -> Self.Element?
func randomElement<T>(using generator: inout T) -> Self.Element? where T : RandomNumberGenerator
func reduce<Result>(_ initialResult: Result, _ nextPartialResult: (Result, Self.Element) throws -> Result) rethrows -> Result
func reduce<Result>(into initialResult: Result, _ updateAccumulatingResult: (inout Result, Self.Element) throws -> ()) rethrows -> Result
func required()
func requirement()
func reversed() -> [Self.Element]
func shuffled() -> [Self.Element]
func shuffled<T>(using generator: inout T) -> [Self.Element] where T : RandomNumberGenerator
func sorted() -> [Self.Element]
func sorted(by areInIncreasingOrder: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]
func split(maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true, whereSeparator isSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]
func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]
func starts<PossiblePrefix>(with possiblePrefix: PossiblePrefix) -> Bool where PossiblePrefix : Sequence, Self.Element == PossiblePrefix.Element
func starts<PossiblePrefix>(with possiblePrefix: PossiblePrefix, by areEquivalent: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool where PossiblePrefix : Sequence
func suffix(_ maxLength: Int) -> Self.SubSequence
func suffix(from start: Self.Index) -> Self.SubSequence
func withContiguousStorageIfAvailable<R>(_ body: (UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?
infix operator ≠
infix operator ≤
infix operator ≥
init()
init(extendedGraphemeClusterLiteral value: Self.StringLiteralType)
init(stringInterpolation: DefaultStringInterpolation)
init(stringInterpolation: DefaultStringInterpolation)
init(stringLiteral: String)
init(unicodeScalarLiteral value: Self.ExtendedGraphemeClusterLiteralType)
init?(rawValue: Int)
let property: Bool
override func encode(to encoder: Encoder) throws
override func methodOverride()
precedencegroup Precedence
protocol Protocol
required init(from decoder: Decoder) throws
required init(from decoder: Decoder) throws
static func != (lhs: Self, rhs: Self) -> Bool
static func != (lhs: Self, rhs: Self) -> Bool
static func ... (maximum: Self) -> PartialRangeThrough<Self>
static func ... (minimum: Self) -> PartialRangeFrom<Self>
static func ... (minimum: Self, maximum: Self) -> ClosedRange<Self>
static func ..< (maximum: Self) -> PartialRangeUpTo<Self>
static func ..< (minimum: Self, maximum: Self) -> Range<Self>
static func < (lhs: Inherited, rhs: Inherited) -> Bool
static func <= (lhs: Self, rhs: Self) -> Bool
static func == (lhs: Inherited, rhs: Inherited) -> Bool
static func > (lhs: Self, rhs: Self) -> Bool
static func >= (lhs: Self, rhs: Self) -> Bool
static func staticMethod()
static let staticProperty: Bool
struct CollectionType
struct Inherited
struct InheritingAssociatedType
struct Structure
struct TypeExpressibleByStringInterpolation
subscript(bounds: Range<Self.Index>) -> Slice<Self> { get }
subscript(position: Int) -> Int { get }
subscript(subscript: Int) -> Bool { get }
subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }
subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get }
typealias Index = Int
typealias Indices = DefaultIndices<CollectionType>
typealias RawValue = Int
typealias TypeAlias = Bool
var count: Int { get }
var endIndex: Int { get }
var extensionProperty: Bool { get }
var first: Self.Element? { get }
var globalVariable: Bool
var indices: DefaultIndices<Self> { get }
var isEmpty: Bool { get }
var lazy: LazySequence<Self> { get }
var propertyInASeparateExtension: Bool { get }
var rawValue: Int
var startIndex: Int { get }
var underestimatedCount: Int { get }
var underestimatedCount: Int { get }